colour='Frequency (GHz)') +
facet_wrap(~environment)
path = file.path(folder, 'figures', 'se_panel.png')
ggsave(path, units="in", width=7, height=4)
print(plot)
dev.off()
source('D:/Github/podis/vis/vis_dist_capacity.r', echo=TRUE)
View(data)
###plot pysim5g lookup tables
# install.packages("tidyverse")
library(tidyverse)
library(plyr)
library(ggpubr)
#####################
#get folder directory
folder <- dirname(rstudioapi::getSourceEditorContext()$path)
#get path to full tables via the data folder
full_tables <- file.path(folder, '..', 'data', 'raw', 'pysim5g', 'full_tables')
#get a list of all files in the folder ending in .csv
myfiles = list.files(path=full_tables, pattern="*.csv", full.names=TRUE)
#import data for all files in file list
data = ldply(myfiles, read_csv)
# lut = file.path(folder, '..', 'data', 'raw', 'pysim5g', 'capacity_lut_by_frequency.csv')
# data = read.csv(lut)
data = data[data$frequency_GHz == 2.1 |
data$frequency_GHz == 0.8 |
data$frequency_GHz == 0.7 |
data$frequency_GHz == 1.8
,]
data <- data[!(data$generation == "5G"),]
# #drop results over 5km distance
# data = data[data$inter_site_distance_m <= 10000,]
#drop results over 5km distance
data = data[data$r_distance <= 5000,]
#turn env into factor and relabel
data$environment = factor(data$environment, levels=c("urban",
"suburban",
"rural"),
labels=c("Urban",
"Suburban",
"Rural"))
data$combined <- paste(data$generation, data$frequency_GHz, sep="_")
unique(data$combined)
data$combined = factor(data$combined,
levels=c("3G_1.8",
"3G_2.1",
"4G_0.7",
"4G_0.8",
"4G_2.1"),
labels=c("1.8 (3G)",
"2.1 (3G)",
"0.7 (4G)",
"0.8 (4G)",
"2.1 (4G)"))
unique(data$combined)
View(data)
###plot pysim5g lookup tables
# install.packages("tidyverse")
library(tidyverse)
library(plyr)
library(ggpubr)
#####################
#get folder directory
folder <- dirname(rstudioapi::getSourceEditorContext()$path)
#get path to full tables via the data folder
full_tables <- file.path(folder, '..', 'data', 'raw', 'pysim5g', 'full_tables')
#get a list of all files in the folder ending in .csv
myfiles = list.files(path=full_tables, pattern="*.csv", full.names=TRUE)
#import data for all files in file list
data = ldply(myfiles, read_csv)
# lut = file.path(folder, '..', 'data', 'raw', 'pysim5g', 'capacity_lut_by_frequency.csv')
# data = read.csv(lut)
data = data[data$frequency_GHz == 2.1 |
data$frequency_GHz == 0.8 |
data$frequency_GHz == 0.7 |
data$frequency_GHz == 1.8
,]
data <- data[!(data$generation == "5G"),]
# #drop results over 5km distance
# data = data[data$inter_site_distance_m <= 10000,]
#drop results over 5km distance
data = data[data$r_distance <= 5000,]
#turn env into factor and relabel
data$environment = factor(data$environment, levels=c("urban",
"suburban",
"rural"),
labels=c("Urban",
"Suburban",
"Rural"))
data$combined <- paste(data$generation, data$frequency_GHz, sep="_")
unique(data$combined)
data$combined = factor(data$combined,
levels=c("3G_1.8",
"3G_2.1",
"4G_0.7",
"4G_0.8",
"4G_1.8",
"4G_2.1"),
labels=c("1.8 (3G)",
"2.1 (3G)",
"0.7 (4G)",
"0.8 (4G)",
"1.8 (4G)",
"2.1 (4G)"))
unique(data$combined)
#subset the data for plotting
data = select(data, inter_site_distance_m, r_distance, environment, combined, spectral_efficiency_bps_hz)
plot = ggplot(data, aes(x=r_distance/1000, y=spectral_efficiency_bps_hz,
colour=factor(combined))) +
# geom_point() +
geom_smooth() +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = 'Spectral Efficiency by Technology and Frequency',
x = 'Cell Radius (km)', y='Spectral Efficiency (Bps/Hz)',
colour='Frequency (GHz)') +
facet_wrap(~environment)
path = file.path(folder, 'figures', 'se_panel.png')
ggsave(path, units="in", width=7, height=4)
print(plot)
dev.off()
ggplot(data, aes(x=r_distance/1000, y=spectral_efficiency_bps_hz,
colour=factor(combined))) +
geom_point(size=0.5) +
geom_smooth() +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = 'Spectral Efficiency by Technology and Frequency',
x = 'Cell Radius (km)', y='Spectral Efficiency (Bps/Hz)',
colour='Frequency (GHz)') +
facet_wrap(~environment)
ggplot(data, aes(x=r_distance/1000, y=spectral_efficiency_bps_hz,
colour=factor(combined))) +
geom_point(size=0.5) +
geom_smooth(size=0.5) +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = 'Spectral Efficiency by Technology and Frequency',
x = 'Cell Radius (km)', y='Spectral Efficiency (Bps/Hz)',
colour='Frequency (GHz)') +
facet_wrap(~environment)
View(data)
source('D:/Github/podis/vis/vis_dist_capacity.r', echo=TRUE)
source('D:/Github/podis/vis/vis_dist_capacity.r', echo=TRUE)
ggplot(data, aes(x=r_distance/1000, y=capacity_mbps,
colour=factor(combined))) +
geom_point(size=0.5) +
geom_smooth(size=0.5) +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = 'Channel Capacity vs User Distance', x = NULL, y='Capacity (Mbps)', colour='Frequency (GHz)\n(10MHz BW)') +
facet_wrap(~environment)
source('D:/Github/podis/vis/vis_dist_capacity.r', echo=TRUE)
path = file.path(folder, 'figures', 'se_panel.png')
ggsave(path, units="in", width=7, height=5)
print(plot)
dev.off()
panel = ggarrange(se, capacity,
common.legend = TRUE, legend = 'bottom', ncol = 1, nrow = 2)
path = file.path(folder, 'figures', 'se_panel.png')
ggsave(path, units="in", width=7, height=5)
print(panel)
dev.off()
View(data)
#get folder directory
folder <- dirname(rstudioapi::getSourceEditorContext()$path)
#get path to full tables via the data folder
full_tables <- file.path(folder, '..', 'data', 'raw', 'pysim5g', 'full_tables')
#get a list of all files in the folder ending in .csv
myfiles = list.files(path=full_tables, pattern="*.csv", full.names=TRUE)
#import data for all files in file list
data = ldply(myfiles, read_csv)
View(data)
View(data)
source('D:/Github/podis/vis/vis_dist_capacity.r', echo=TRUE)
path = file.path(folder, 'figures', 'se_panel.png')
ggsave(path, units="in", width=7, height=4)
print(se)
dev.off()
path = file.path(folder, 'figures', 'se_panel.png')
ggsave(path, units="in", width=7, height=3)
print(se)
dev.off()
unique(data$combined)
#get folder directory
folder <- dirname(rstudioapi::getSourceEditorContext()$path)
#get path to full tables via the data folder
full_tables <- file.path(folder, '..', 'data', 'raw', 'pysim5g', 'full_tables')
#get a list of all files in the folder ending in .csv
myfiles = list.files(path=full_tables, pattern="*.csv", full.names=TRUE)
#import data for all files in file list
data = ldply(myfiles, read_csv)
# lut = file.path(folder, '..', 'data', 'raw', 'pysim5g', 'capacity_lut_by_frequency.csv')
# data = read.csv(lut)
data = data[data$frequency_GHz == 2.1 |
data$frequency_GHz == 0.8 |
data$frequency_GHz == 0.7 |
data$frequency_GHz == 1.8 |
data$transmitter_type == '1x1' |
data$frequency_GHz == '2x2'
,]
#get folder directory
folder <- dirname(rstudioapi::getSourceEditorContext()$path)
#get path to full tables via the data folder
full_tables <- file.path(folder, '..', 'data', 'raw', 'pysim5g', 'full_tables')
#get a list of all files in the folder ending in .csv
myfiles = list.files(path=full_tables, pattern="*.csv", full.names=TRUE)
#import data for all files in file list
data = ldply(myfiles, read_csv)
# lut = file.path(folder, '..', 'data', 'raw', 'pysim5g', 'capacity_lut_by_frequency.csv')
# data = read.csv(lut)
test = data[data$frequency_GHz == 2.1 |
data$frequency_GHz == 0.8 |
data$frequency_GHz == 0.7 |
data$frequency_GHz == 1.8 |
data$transmitter_type == '1x1' |
data$transmitter_type == '2x2'
,]
View(data)
test = data[data$frequency_GHz == 2.1 |
data$frequency_GHz == 0.8 |
data$frequency_GHz == 0.7 |
data$frequency_GHz == 1.8 |
data$transmitton_type == '1x1' |
data$transmitton_type == '2x2'
,]
test = data[data$frequency_GHz == 2.1 |
data$frequency_GHz == 0.8 |
data$frequency_GHz == 0.7 |
data$frequency_GHz == 1.8 |
data$transmittin_type == '1x1' |
data$transmittin_type == '2x2'
,]
test = data[data$frequency_GHz == 2.1 |
data$frequency_GHz == 0.8 |
data$frequency_GHz == 0.7 |
data$frequency_GHz == 1.8 |
data$transmittion_type == '1x1' |
data$transmittion_type == '2x2'
,]
data = data[data$frequency_GHz == 2.1 |
data$frequency_GHz == 0.8 |
data$frequency_GHz == 0.7 |
data$frequency_GHz == 1.8 |
data$transmittion_type == '1x1' |
data$transmittion_type == '2x2'
,]
data <- data[!(data$generation == "5G"),]
# #drop results over 5km distance
# data = data[data$inter_site_distance_m <= 10000,]
#drop results over 5km distance
data = data[data$r_distance <= 5000,]
#turn env into factor and relabel
data$environment = factor(data$environment, levels=c("urban",
"suburban",
"rural"),
labels=c("Urban",
"Suburban",
"Rural"))
data$combined <- paste(data$generation, data$frequency_GHz, sep="_")
unique(data$combined)
data$combined = factor(data$combined,
levels=c("3G_1.8",
"3G_2.1",
"4G_0.7",
"4G_0.8",
"4G_1.8",
"4G_2.1"),
labels=c("1.8 (3G)",
"2.1 (3G)",
"0.7 (4G)",
"0.8 (4G)",
"1.8 (4G)",
"2.1 (4G)"))
unique(data$combined)
#subset the data for plotting
data = select(data, inter_site_distance_m, r_distance, environment,
combined, spectral_efficiency_bps_hz, capacity_mbps)
ggplot(data, aes(x=r_distance/1000, y=spectral_efficiency_bps_hz,
colour=factor(combined))) +
geom_point(size=0.5) +
geom_smooth(size=0.5) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = 'Spectral Efficiency by Frequency and Technology',
x = 'Cell Radius (km)', y='Spectral Efficiency (Bps/Hz)',
colour='Frequency (GHz)\n(10MHz BW)') +
facet_wrap(~environment)
#get folder directory
folder <- dirname(rstudioapi::getSourceEditorContext()$path)
#get path to full tables via the data folder
full_tables <- file.path(folder, '..', 'data', 'raw', 'pysim5g', 'full_tables')
#get a list of all files in the folder ending in .csv
myfiles = list.files(path=full_tables, pattern="*.csv", full.names=TRUE)
#import data for all files in file list
data = ldply(myfiles, read_csv)
# lut = file.path(folder, '..', 'data', 'raw', 'pysim5g', 'capacity_lut_by_frequency.csv')
# data = read.csv(lut)
data = data[data$frequency_GHz == 2.1 |
data$frequency_GHz == 0.8 |
data$frequency_GHz == 0.7 |
data$frequency_GHz == 1.8 |
data$transmittion_type == '1x1' |
data$transmittion_type == '2x2'
,]
data <- data[!(data$generation == "5G"),]
# #drop results over 5km distance
# data = data[data$inter_site_distance_m <= 10000,]
#drop results over 5km distance
data = data[data$r_distance <= 5000,]
#turn env into factor and relabel
data$environment = factor(data$environment, levels=c("urban",
"suburban",
"rural"),
labels=c("Urban",
"Suburban",
"Rural"))
data$combined <- paste(data$generation, data$frequency_GHz, sep="_")
unique(data$combined)
#get folder directory
folder <- dirname(rstudioapi::getSourceEditorContext()$path)
#get path to full tables via the data folder
full_tables <- file.path(folder, '..', 'data', 'raw', 'pysim5g', 'full_tables')
#get a list of all files in the folder ending in .csv
myfiles = list.files(path=full_tables, pattern="*.csv", full.names=TRUE)
#import data for all files in file list
data = ldply(myfiles, read_csv)
data = data[data$transmittion_type == '1x1' |
data$transmittion_type == '2x2'
,]
unique(data$transmittion_type)
data = data[data$frequency_GHz == 2.1 |
data$frequency_GHz == 0.8 |
data$frequency_GHz == 0.7 |
data$frequency_GHz == 1.8
,]
data <- data[!(data$generation == "5G"),]
# #drop results over 5km distance
# data = data[data$inter_site_distance_m <= 10000,]
#drop results over 5km distance
data = data[data$r_distance <= 5000,]
#turn env into factor and relabel
data$environment = factor(data$environment, levels=c("urban",
"suburban",
"rural"),
labels=c("Urban",
"Suburban",
"Rural"))
data$combined <- paste(data$generation, data$frequency_GHz, sep="_")
unique(data$combined)
data$combined = factor(data$combined,
levels=c("3G_1.8",
"3G_2.1",
"4G_0.7",
"4G_0.8",
"4G_1.8",
"4G_2.1"),
labels=c("1.8 (3G)",
"2.1 (3G)",
"0.7 (4G)",
"0.8 (4G)",
"1.8 (4G)",
"2.1 (4G)"))
unique(data$combined)
#subset the data for plotting
data = select(data, inter_site_distance_m, r_distance, environment,
combined, spectral_efficiency_bps_hz, capacity_mbps)
ggplot(data, aes(x=r_distance/1000, y=spectral_efficiency_bps_hz,
colour=factor(combined))) +
geom_point(size=0.75) +
geom_smooth(size=0.75) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = 'Spectral Efficiency by Frequency and Technology',
x = 'Cell Radius (km)', y='Spectral Efficiency (Bps/Hz)',
colour='Frequency (GHz)\n(10MHz BW)') +
facet_wrap(~environment)
View(data)
ggplot(data, aes(x=r_distance/1000, y=spectral_efficiency_bps_hz,
colour=factor(combined))) +
# geom_point(size=0.75) +
geom_smooth(size=0.75) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = 'Spectral Efficiency by Frequency and Technology',
x = 'Cell Radius (km)', y='Spectral Efficiency (Bps/Hz)',
colour='Frequency (GHz)\n(10MHz BW)') +
facet_wrap(~environment)
source('D:/Github/podis/vis/vis_dist_capacity.r', echo=TRUE)
ggplot(data, aes(x=r_distance/1000, y=spectral_efficiency_bps_hz,
colour=factor(combined))) +
geom_point(size=0.75) +
geom_smooth(size=0.75) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = 'Spectral Efficiency by Frequency and Technology',
x = 'Cell Radius (km)', y='Spectral Efficiency (Bps/Hz)',
colour='Frequency (GHz)\n(10MHz BW)') +
facet_wrap(~environment)
se = ggplot(data, aes(x=r_distance/1000, y=spectral_efficiency_bps_hz,
colour=factor(combined))) +
geom_point(size=0.75) +
geom_smooth(size=0.75) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = 'Spectral Efficiency by Frequency and Technology',
x = 'Cell Radius (km)', y='Spectral Efficiency (Bps/Hz)',
colour='Frequency (GHz)\n(10MHz BW)') +
facet_wrap(~environment)
path = file.path(folder, 'figures', 'se_panel.png')
ggsave(path, units="in", width=7, height=3)
print(se)
dev.off()
se = ggplot(data, aes(x=r_distance/1000, y=spectral_efficiency_bps_hz,
colour=factor(combined))) +
geom_point(size=0.5) +
geom_smooth(size=0.5) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = 'Spectral Efficiency by Frequency and Technology',
x = 'Cell Radius (km)', y='Spectral Efficiency (Bps/Hz)',
colour='Frequency (GHz)\n(10MHz BW)') +
facet_wrap(~environment)
path = file.path(folder, 'figures', 'se_panel.png')
ggsave(path, units="in", width=7, height=3)
print(se)
dev.off()
se = ggplot(data, aes(x=r_distance/1000, y=spectral_efficiency_bps_hz,
colour=factor(combined))) +
geom_point(size=0.25) +
geom_smooth(size=0.25) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = 'Spectral Efficiency by Frequency and Technology',
x = 'Cell Radius (km)', y='Spectral Efficiency (Bps/Hz)',
colour='Frequency (GHz)\n(10MHz BW)') +
facet_wrap(~environment)
path = file.path(folder, 'figures', 'se_panel.png')
ggsave(path, units="in", width=7, height=3)
print(se)
dev.off()
se = ggplot(data, aes(x=r_distance/1000, y=spectral_efficiency_bps_hz,
colour=factor(combined))) +
geom_point(size=0.1) +
geom_smooth(size=0.5) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = 'Spectral Efficiency by Frequency and Technology',
x = 'Cell Radius (km)', y='Spectral Efficiency (Bps/Hz)',
colour='Frequency (GHz)\n(10MHz BW)') +
facet_wrap(~environment)
path = file.path(folder, 'figures', 'se_panel.png')
ggsave(path, units="in", width=7, height=3)
print(se)
dev.off()
source('D:/Github/podis/vis/vis_dist_capacity.r', echo=TRUE)
source('D:/Github/podis/vis/vis_dist_capacity.r', echo=TRUE)
se = ggplot(data, aes(x=r_distance/1000, y=spectral_efficiency_bps_hz,
colour=factor(combined))) +
geom_point(size=0.1) +
geom_smooth(size=0.5) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), limits=c(0,12)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = 'Spectral Efficiency by Frequency and Technology',
x = 'Cell Radius (km)', y='Spectral Efficiency (Bps/Hz)',
colour='Frequency (GHz)') +
facet_wrap(~environment)
path = file.path(folder, 'figures', 'se_panel.png')
ggsave(path, units="in", width=7, height=3)
print(se)
dev.off()
se = ggplot(data, aes(x=r_distance/1000, y=spectral_efficiency_bps_hz,
colour=factor(combined))) +
geom_point(size=0.1) +
geom_smooth(size=0.5) +
scale_x_continuous(expand = c(0, 0), limits=c(0,8)) +
scale_y_continuous(expand = c(0, 0), limits=c(0,10.5)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = 'Spectral Efficiency by Frequency and Technology',
x = 'Cell Radius (km)', y='Spectral Efficiency (Bps/Hz)',
colour='Frequency (GHz)') +
facet_wrap(~environment)
path = file.path(folder, 'figures', 'se_panel.png')
ggsave(path, units="in", width=7, height=3)
print(se)
dev.off()
source('D:/Github/podis/vis/vis_dist_capacity.r', echo=TRUE)
source('D:/Github/podis/vis/vis_dist_capacity.r', echo=TRUE)
se = ggplot(data, aes(x=r_distance/1000, y=spectral_efficiency_bps_hz,
colour=factor(combined))) +
geom_point(size=0.1) +
geom_smooth(size=0.5) +
scale_x_continuous(expand = c(0, 0), limits=c(0,7.5)) +
scale_y_continuous(expand = c(0, 0), limits=c(0,10.5)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = 'Mean Spectral Efficiency by Frequency and Technology',
x = 'Cell Radius (km)', y='Spectral Efficiency (Bps/Hz)',
colour='Frequency (GHz)') +
facet_wrap(~environment)
path = file.path(folder, 'figures', 'se_panel.png')
ggsave(path, units="in", width=7, height=3.5)
print(se)
dev.off()
