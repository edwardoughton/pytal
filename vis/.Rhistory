"0.9 GHZ",
"1.8 GHZ",
"2.1 GHZ",
"3.5 GHZ"))
#subset the data for plotting
data = select(data, environment, generation, frequency_GHz,
r_distance, spectral_efficiency_bps_hz)
data$bin = cut(data$r_distance, breaks=c(0, 1000, 2000, 3000, 4000, 5000, 6000))
test = data %>%
group_by(environment, generation, frequency_GHz, bin) %>%
summarize(mean = mean(spectral_efficiency_bps_hz))
View(test)
test = data %>%
group_by(environment, generation, frequency_GHz, bin) %>%
dplyr::summarize(mean = mean(spectral_efficiency_bps_hz))
View(test)
source('D:/Github/qubic/vis/vis_dist_capacity.r', echo=TRUE)
###plot pysim5g lookup tables
# install.packages("tidyverse")
library(tidyverse)
library(plyr)
library(ggpubr)
#####################
#get folder directory
folder <- dirname(rstudioapi::getSourceEditorContext()$path)
#get path to full tables via the data folder
full_tables <- file.path(folder, '..', 'data', 'raw', 'pysim5g', 'full_tables')
#get a list of all files in the folder ending in .csv
myfiles = list.files(path=full_tables, pattern="*.csv", full.names=TRUE)
#import data for all files in file list
data = ldply(myfiles, read_csv)
#select the ISD of 10000m to plot
data = data[data$inter_site_distance_m == 10800,]
data = data[!(data$environment == 'urban' & data$r_distance > 5000),]
#turn env into factor and relabel
data$environment = factor(data$environment, levels=c("urban",
"suburban",
"rural"),
labels=c("Urban",
"Suburban",
"Rural"))
data$generation = factor(data$generation, levels=c("3G",
"4G",
"5G"),
labels=c("3G (SISO)",
"4G (2x2 MIMO)",
"5G (4x4 MIMO)"))
data$frequency_GHz = factor(data$frequency_GHz,
levels=c(0.7, 0.8, 0.9, 1.8, 2.1, 3.5),
labels=c("0.7 GHZ",
"0.8 GHZ",
"0.9 GHZ",
"1.8 GHZ",
"2.1 GHZ",
"3.5 GHZ"))
#subset the data for plotting
data = select(data, environment, generation, frequency_GHz,
r_distance, spectral_efficiency_bps_hz)
###plot pysim5g lookup tables
# install.packages("tidyverse")
library(tidyverse)
library(plyr)
library(ggpubr)
#####################
#get folder directory
folder <- dirname(rstudioapi::getSourceEditorContext()$path)
#get path to full tables via the data folder
full_tables <- file.path(folder, '..', 'data', 'raw', 'pysim5g', 'full_tables')
#get a list of all files in the folder ending in .csv
myfiles = list.files(path=full_tables, pattern="*.csv", full.names=TRUE)
#import data for all files in file list
data = ldply(myfiles, read_csv)
#select the ISD of 10000m to plot
data = data[data$inter_site_distance_m == 10800,]
data = data[!(data$environment == 'urban' & data$r_distance > 5000),]
#turn env into factor and relabel
data$environment = factor(data$environment, levels=c("urban",
"suburban",
"rural"),
labels=c("Urban",
"Suburban",
"Rural"))
data$generation = factor(data$generation, levels=c("3G",
"4G",
"5G"),
labels=c("3G (SISO)",
"4G (2x2 MIMO)",
"5G (4x4 MIMO)"))
###plot pysim5g lookup tables
# install.packages("tidyverse")
library(tidyverse)
library(plyr)
library(ggpubr)
#####################
#get folder directory
folder <- dirname(rstudioapi::getSourceEditorContext()$path)
#get path to full tables via the data folder
full_tables <- file.path(folder, '..', 'data', 'raw', 'pysim5g', 'full_tables')
#get a list of all files in the folder ending in .csv
myfiles = list.files(path=full_tables, pattern="*.csv", full.names=TRUE)
#import data for all files in file list
data = ldply(myfiles, read_csv)
#select the ISD of 10000m to plot
data = data[data$inter_site_distance_m == 10800,]
data = data[!(data$environment == 'urban' & data$r_distance > 5000),]
#turn env into factor and relabel
data$environment = factor(data$environment, levels=c("urban",
"suburban",
"rural"),
labels=c("Urban",
"Suburban",
"Rural"))
data$frequency_GHz = factor(data$frequency_GHz,
levels=c(0.7, 0.8, 0.9, 1.8, 2.1, 3.5),
labels=c("0.7 GHZ",
"0.8 GHZ",
"0.9 GHZ",
"1.8 GHZ",
"2.1 GHZ",
"3.5 GHZ"))
library(plyr)
library(ggpubr)
#####################
#get folder directory
folder <- dirname(rstudioapi::getSourceEditorContext()$path)
#get path to full tables via the data folder
full_tables <- file.path(folder, '..', 'data', 'raw', 'pysim5g', 'full_tables')
#get a list of all files in the folder ending in .csv
myfiles = list.files(path=full_tables, pattern="*.csv", full.names=TRUE)
#import data for all files in file list
data = ldply(myfiles, read_csv)
#select the ISD of 10000m to plot
data = data[data$inter_site_distance_m == 10800,]
#get folder directory
folder <- dirname(rstudioapi::getSourceEditorContext()$path)
#get path to full tables via the data folder
full_tables <- file.path(folder, '..', 'data', 'raw', 'pysim5g', 'full_tables')
#get a list of all files in the folder ending in .csv
myfiles = list.files(path=full_tables, pattern="*.csv", full.names=TRUE)
#get folder directory
folder <- dirname(rstudioapi::getSourceEditorContext()$path)
#get path to full tables via the data folder
full_tables <- file.path(folder, '..', 'data', 'raw', 'pysim5g', 'full_tables')
#get a list of all files in the folder ending in .csv
myfiles = list.files(path=full_tables, pattern="*.csv", full.names=TRUE)
#import data for all files in file list
data = ldply(myfiles, read_csv)
#select the ISD of 10000m to plot
data = data[data$inter_site_distance_m == 10800,]
data = data[!(data$environment == 'urban' & data$r_distance > 5000),]
#turn env into factor and relabel
data$environment = factor(data$environment, levels=c("urban",
"suburban",
"rural"),
labels=c("Urban",
"Suburban",
"Rural"))
data$generation = factor(data$generation, levels=c("3G",
"4G",
"5G"),
labels=c("3G (SISO)",
"4G (2x2 MIMO)",
"5G (4x4 MIMO)"))
data$frequency_GHz = factor(data$frequency_GHz,
levels=c(0.7, 0.8, 0.9, 1.8, 2.1, 3.5),
labels=c("0.7 GHZ",
"0.8 GHZ",
"0.9 GHZ",
"1.8 GHZ",
"2.1 GHZ",
"3.5 GHZ"))
#subset the data for plotting
data = select(data, environment, generation, frequency_GHz,
r_distance, spectral_efficiency_bps_hz)
data$bin = cut(data$r_distance, breaks=c(0, 1000, 2000, 3000, 4000, 5000, 6000))
test = data %>%
group_by(environment, generation, frequency_GHz, bin) %>%
dplyr::summarize(mean = mean(spectral_efficiency_bps_hz))
View(test)
###plot pysim5g lookup tables
# install.packages("tidyverse")
library(tidyverse)
library(plyr)
library(ggpubr)
#####################
#get folder directory
folder <- dirname(rstudioapi::getSourceEditorContext()$path)
#get path to full tables via the data folder
full_tables <- file.path(folder, '..', 'data', 'raw', 'pysim5g', 'full_tables')
#get a list of all files in the folder ending in .csv
myfiles = list.files(path=full_tables, pattern="*.csv", full.names=TRUE)
#import data for all files in file list
data = ldply(myfiles, read_csv)
#select the ISD of 10000m to plot
data = data[data$inter_site_distance_m == 10800,]
data = data[!(data$environment == 'urban' & data$r_distance > 5000),]
#turn env into factor and relabel
data$environment = factor(data$environment, levels=c("urban",
"suburban",
"rural"),
labels=c("Urban",
"Suburban",
"Rural"))
data$generation = factor(data$generation, levels=c("3G",
"4G",
"5G"),
labels=c("3G (SISO)",
"4G (2x2 MIMO)",
"5G (4x4 MIMO)"))
data$frequency_GHz = factor(data$frequency_GHz,
levels=c(0.7, 0.8, 0.9, 1.8, 2.1, 3.5),
labels=c("0.7 GHZ",
"0.8 GHZ",
"0.9 GHZ",
"1.8 GHZ",
"2.1 GHZ",
"3.5 GHZ"))
#subset the data for plotting
data = select(data, environment, generation, frequency_GHz,
r_distance, spectral_efficiency_bps_hz)
#plot data
#locally estimated scatterplot smoothing
#https://ggplot2.tidyverse.org/reference/geom_smooth.html
panel = ggplot(data, aes(x=r_distance/1000,
y=spectral_efficiency_bps_hz,
colour=factor(frequency_GHz))) +
geom_line() +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = '(A) Spectral Efficiency vs User Distance', x = 'Distance (km)',
y='Spectral Efficiency (Bps/Hz)', colour='Frequency') +
facet_grid(generation~environment)
# #plot data
# #locally estimated scatterplot smoothing
# #https://ggplot2.tidyverse.org/reference/geom_smooth.html
# pysim5g_plot_capacity = ggplot(data, aes(x=r_distance/1000, y=capacity_mbps,
#                                          colour=factor(frequency_GHz))) +
#   geom_point(size=0.25) +
#   geom_smooth() +
#   scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
#   theme(legend.position="bottom") + guides(colour=guide_legend(ncol=4)) +
#   labs(title = '(B) Channel Capacity vs User Distance (10 MHz Bandwidth)',
#        x = 'Distance (km)', y='Capacity (Mbps)', colour='Frequency') +
#   facet_wrap(~environment)
# #plot data
# #locally estimated scatterplot smoothing
# #https://ggplot2.tidyverse.org/reference/geom_smooth.html
# pysim5g_plot_capacity_km2 = ggplot(data, aes(x=r_distance/1000, y=capacity_mbps_km2, colour=factor(frequency_GHz))) +
#   geom_point() +
#   geom_smooth() +
#   scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
#   theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
#   labs(title = 'Area Capacity vs User Distance', x = "Distance (km)", y='Capacity (Mbps/km^2)', colour='Frequency (GHz)\n(10MHz BW)') +
#   facet_wrap(~environment)
# panel = ggarrange(
#   pysim5g_plot_se,
#   pysim5g_plot_capacity,
#   # pysim5g_plot_capacity_km2,
#   common.legend = TRUE, legend = 'bottom', ncol = 1, nrow = 2)
path = file.path(folder, 'figures', 'pysim5g_panel.png')
ggsave(path, units="in", width=8, height=6, dpi=300)
print(panel)
dev.off()
ggplot(data, aes(x=r_distance/1000,
y=spectral_efficiency_bps_hz,
colour=factor(frequency_GHz))) +
geom_smooth() +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = '(A) Spectral Efficiency vs User Distance', x = 'Distance (km)',
y='Spectral Efficiency (Bps/Hz)', colour='Frequency') +
facet_grid(generation~environment)
source('D:/Github/qubic/vis/vis_dist_capacity.r', echo=TRUE)
source('D:/Github/qubic/vis/vis_dist_capacity.r', echo=TRUE)
source('D:/Github/qubic/vis/vis_dist_capacity.r', echo=TRUE)
ggplot(data, aes(x=r_distance/1000,
y=spectral_efficiency_bps_hz,
colour=factor(frequency_GHz))) +
geom_point(size=0.25) +
geom_smooth(size=.5) +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = '(A) Spectral Efficiency vs User Distance', x = 'Distance (km)',
y='Spectral Efficiency (Bps/Hz)', colour='Frequency') +
facet_grid(generation~environment)
ggplot(data, aes(x=r_distance/1000,
y=spectral_efficiency_bps_hz,
colour=factor(frequency_GHz))) +
geom_point(size=0.2) +
geom_smooth(size=1) +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = '(A) Spectral Efficiency vs User Distance', x = 'Distance (km)',
y='Spectral Efficiency (Bps/Hz)', colour='Frequency') +
facet_grid(generation~environment)
ggplot(data, aes(x=r_distance/1000,
y=spectral_efficiency_bps_hz,
colour=factor(frequency_GHz))) +
geom_point(size=0.2) +
geom_smooth(method = 'loess', size=1) +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = '(A) Spectral Efficiency vs User Distance', x = 'Distance (km)',
y='Spectral Efficiency (Bps/Hz)', colour='Frequency') +
facet_grid(generation~environment)
ggplot(data, aes(x=r_distance/1000,
y=spectral_efficiency_bps_hz,
colour=factor(frequency_GHz))) +
geom_point(size=0.2) +
geom_smooth(formula=y~x, method = 'loess', size=1) +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
theme(legend.position="bottom") + guides(colour=guide_legend(ncol=7)) +
labs(title = '(A) Spectral Efficiency vs User Distance', x = 'Distance (km)',
y='Spectral Efficiency (Bps/Hz)', colour='Frequency') +
facet_grid(generation~environment)
source('D:/Github/qubic/vis/vis_dist_capacity.r', echo=TRUE)
source('D:/Github/qubic/vis/vis_dist_capacity.r', echo=TRUE)
source('D:/Github/qubic/vis/vis_dist_capacity.r', echo=TRUE)
source('D:/Github/qubic/vis/vis_dist_capacity.r', echo=TRUE)
source('D:/Github/qubic/vis/vis_dist_capacity.r', echo=TRUE)
source('D:/Github/qubic/vis/vis_dist_capacity.r', echo=TRUE)
source('D:/Github/qubic/vis/vis_gambia_report.R', echo=TRUE)
folder <- dirname(rstudioapi::getSourceEditorContext()$path)
filename = 'national_market_cost_results_technology_options.csv'
data <- read.csv(file.path(folder, '..', 'results', 'model_results', filename))
names(data)[names(data) == 'GID_0'] <- 'country'
data$scenario_adopt[grep("low", data$scenario)] = 'Low (2% Adoption Growth)'
data$scenario_adopt[grep("baseline", data$scenario)] = 'Baseline (4% Adoption Growth)'
data$scenario_adopt[grep("high", data$scenario)] = 'High (6% Adoption Growth)'
data$scenario_capacity[grep("5_5_5", data$scenario)] = '5 Mbps Per User'
data$scenario_capacity[grep("10_10_10", data$scenario)] = '10 Mbps Per User'
data$strategy_short = ''
data$strategy_short[grep("3G_umts_fiber", data$strategy)] = '3G (F)'
data$strategy_short[grep("3G_umts_wireless", data$strategy)] = '3G (W)'
data$strategy_short[grep("4G_epc_fiber", data$strategy)] = '4G (F)'
data$strategy_short[grep("4G_epc_wireless", data$strategy)] = '4G (W)'
data$strategy_short[grep("5G_nsa_fiber", data$strategy)] = '5G (F)'
data$strategy_short[grep("5G_nsa_wireless", data$strategy)] = '5G (W)'
data$strategy_short = factor(data$strategy_short, levels=c(
"3G (F)",
"4G (F)",
'5G (F)',
"3G (W)",
"4G (W)",
'5G (W)'
))
data$scenario_capacity = factor(data$scenario_capacity,
levels=c("10 Mbps Per User",
"5 Mbps Per User"))
data = data[complete.cases(data), ]
data$scenario_adopt = factor(data$scenario_adopt,
levels=c("Low (2% Adoption Growth)",
"Baseline (4% Adoption Growth)",
"High (6% Adoption Growth)"))
data <- data[(data$confidence == 50),]
data <- select(data, scenario_adopt, scenario_capacity, strategy_short,
cost_per_network_user, cost_per_smartphone_user,
private_cost, government_cost, societal_cost)
totals <- data %>%
group_by(scenario_adopt, scenario_capacity, strategy_short) %>%
summarize(social_cost = round(
(societal_cost)/1e9, 2))
min_value = min(round(data$societal_cost/ 1e9,2))
max_value = max(round(data$societal_cost/ 1e9,2))
min_value[min_value > 0] = 0
colnames(data)[colnames(data) == 'private_cost'] <- 'Private Cost ($USD)'
colnames(data)[colnames(data) == 'government_cost'] <- 'Government Cost ($USD)'
colnames(data)[colnames(data) == 'societal_cost'] <- 'Social Cost ($USD)'
data <- data %>% gather(key="Cost_Type", value = "value",
'Private Cost ($USD)',
'Government Cost ($USD)',
)
data$value = round(data$value/1e9, 3)
ggplot(data, aes(y=value, x=strategy_short, fill=Cost_Type)) +
geom_bar(position="stack", stat="identity") +
geom_text(aes(strategy_short, social_cost, label = social_cost, fill = NULL),
size = 2.5, data = totals, hjust=-.5) +
coord_flip() +
scale_fill_manual(values=c("#E1BE6A", "#40B0A6"), name=NULL) +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust=1)) +
labs(title = "Social Cost of Universal Broadband by Technology for The Gambia",
colour=NULL,
subtitle = "Reported for all scenarios and capacity per user targets",
x = NULL, y = "Social Cost (Billions $USD)") +
scale_y_continuous(expand = c(0, 0), limits = c(0, max_value+0.7)) +
theme(panel.spacing = unit(0.6, "lines")) +
guides(fill=guide_legend(ncol=3, reverse = TRUE)) +
facet_grid(scenario_capacity~scenario_adopt)
View(data)
###VISUALISE MODEL OUTPUTS###
library(tidyverse)
library(ggpubr)
folder <- dirname(rstudioapi::getSourceEditorContext()$path)
filename = 'national_market_cost_results_technology_options.csv'
data <- read.csv(file.path(folder, '..', 'results', 'model_results', filename))
names(data)[names(data) == 'GID_0'] <- 'country'
data$scenario_adopt[grep("low", data$scenario)] = 'Low (2% Adoption Growth)'
data$scenario_adopt[grep("baseline", data$scenario)] = 'Baseline (4% Adoption Growth)'
data$scenario_adopt[grep("high", data$scenario)] = 'High (6% Adoption Growth)'
data$scenario_capacity[grep("5_5_5", data$scenario)] = '5 Mbps Per User'
data$scenario_capacity[grep("10_10_10", data$scenario)] = '10 Mbps Per User'
data$strategy_short = ''
data$strategy_short[grep("3G_umts_fiber", data$strategy)] = '3G (F)'
data$strategy_short[grep("3G_umts_wireless", data$strategy)] = '3G (W)'
data$strategy_short[grep("4G_epc_fiber", data$strategy)] = '4G (F)'
data$strategy_short[grep("4G_epc_wireless", data$strategy)] = '4G (W)'
data$strategy_short[grep("5G_nsa_fiber", data$strategy)] = '5G (F)'
data$strategy_short[grep("5G_nsa_wireless", data$strategy)] = '5G (W)'
data$strategy_short = factor(data$strategy_short, levels=c(
"3G (F)",
"4G (F)",
'5G (F)',
"3G (W)",
"4G (W)",
'5G (W)'
))
data$scenario_capacity = factor(data$scenario_capacity,
levels=c("10 Mbps Per User",
"5 Mbps Per User"))
data = data[complete.cases(data), ]
data$scenario_adopt = factor(data$scenario_adopt,
levels=c("Low (2% Adoption Growth)",
"Baseline (4% Adoption Growth)",
"High (6% Adoption Growth)"))
data <- data[(data$confidence == 50),]
data <- select(data, scenario_adopt, scenario_capacity, strategy_short,
cost_per_network_user, cost_per_smartphone_user,
private_cost, government_cost, societal_cost)
totals <- data %>%
group_by(scenario_adopt, scenario_capacity, strategy_short) %>%
summarize(social_cost = round(
(societal_cost)/1e9, 2))
min_value = min(round(data$societal_cost/ 1e9,2))
max_value = max(round(data$societal_cost/ 1e9,2))
min_value[min_value > 0] = 0
colnames(data)[colnames(data) == 'private_cost'] <- 'Private Cost ($USD)'
colnames(data)[colnames(data) == 'government_cost'] <- 'Government Cost ($USD)'
colnames(data)[colnames(data) == 'societal_cost'] <- 'Social Cost ($USD)'
data <- data %>% gather(key="Cost_Type", value = "value",
'Private Cost ($USD)',
'Government Cost ($USD)',
)
data$value = round(data$value/1e9, 3)
View(data)
ggplot(data, aes(y=value, x=strategy_short, fill=Cost_Type)) +
geom_bar(position="stack", stat="identity") +
geom_text(aes(strategy_short, social_cost, label = social_cost, fill = NULL),
size = 2.5, data = totals, hjust=-.5) +
coord_flip() +
scale_fill_manual(values=c("#E1BE6A", "#40B0A6"), name=NULL) +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust=1)) +
labs(title = "Social Cost of Universal Broadband by Technology for The Gambia",
colour=NULL,
subtitle = "Reported for all scenarios and capacity per user targets",
x = NULL, y = "Social Cost (Billions $USD)") +
scale_y_continuous(expand = c(0, 0), limits = c(0, max_value+0.7)) +
theme(panel.spacing = unit(0.6, "lines")) +
guides(fill=guide_legend(ncol=3, reverse = TRUE)) +
facet_grid(scenario_capacity~scenario_adopt)
View(data)
ggplot(data, aes(y=value, x=strategy_short, fill=Cost_Type)) +
geom_bar(position="stack", stat="identity")
ggplot(data, aes(y=value, x=strategy_short, fill=Cost_Type)) +
geom_bar(position="stack", stat="identity") +
geom_text(aes(strategy_short, social_cost, label = social_cost, fill = NULL),
size = 2.5, data = totals, hjust=-.5)
View(totals)
###VISUALISE MODEL OUTPUTS###
library(tidyverse)
library(ggpubr)
folder <- dirname(rstudioapi::getSourceEditorContext()$path)
filename = 'national_market_cost_results_technology_options.csv'
data <- read.csv(file.path(folder, '..', 'results', 'model_results', filename))
names(data)[names(data) == 'GID_0'] <- 'country'
data$scenario_adopt[grep("low", data$scenario)] = 'Low (2% Adoption Growth)'
data$scenario_adopt[grep("baseline", data$scenario)] = 'Baseline (4% Adoption Growth)'
data$scenario_adopt[grep("high", data$scenario)] = 'High (6% Adoption Growth)'
data$scenario_capacity[grep("5_5_5", data$scenario)] = '5 Mbps Per User'
data$scenario_capacity[grep("10_10_10", data$scenario)] = '10 Mbps Per User'
data$strategy_short = ''
data$strategy_short[grep("3G_umts_fiber", data$strategy)] = '3G (F)'
data$strategy_short[grep("3G_umts_wireless", data$strategy)] = '3G (W)'
data$strategy_short[grep("4G_epc_fiber", data$strategy)] = '4G (F)'
data$strategy_short[grep("4G_epc_wireless", data$strategy)] = '4G (W)'
data$strategy_short[grep("5G_nsa_fiber", data$strategy)] = '5G (F)'
data$strategy_short[grep("5G_nsa_wireless", data$strategy)] = '5G (W)'
data$strategy_short = factor(data$strategy_short, levels=c(
"3G (F)",
"4G (F)",
'5G (F)',
"3G (W)",
"4G (W)",
'5G (W)'
))
data$scenario_capacity = factor(data$scenario_capacity,
levels=c("10 Mbps Per User",
"5 Mbps Per User"))
data = data[complete.cases(data), ]
data$scenario_adopt = factor(data$scenario_adopt,
levels=c("Low (2% Adoption Growth)",
"Baseline (4% Adoption Growth)",
"High (6% Adoption Growth)"))
data <- data[(data$confidence == 50),]
data <- select(data, scenario_adopt, scenario_capacity, strategy_short,
cost_per_network_user, cost_per_smartphone_user,
private_cost, government_cost, societal_cost)
totals <- data %>%
group_by(scenario_adopt, scenario_capacity, strategy_short) %>%
summarize(social_cost = round(
(societal_cost)/1e9, 2))
